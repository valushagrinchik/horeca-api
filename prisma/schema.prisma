// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  Provider
  Horeca
}

enum UserRole {
  Admin
  Horeca
  Provider
}

enum ProductPackagingType {
  Bottle
  Box
  Pallet
}

enum CronStatus {
  Ready
  Work
  Done
  Error
  Failed
}

enum CronType {
  Mail
}

enum PaymentType {
  Prepayment
  Deferment
  PaymentUponDelivery
}

model User {
  id Int @id @default(autoincrement())

  email          String  @unique
  password       String
  activationLink String  @default(uuid()) @map("activation_link")
  isActivated    Boolean @default(false)
  // Название компании
  name           String
  // ИНН
  tin            String

  role UserRole

  phone   String?
  profile Profile?
  mails   Mail[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("users")
}

model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  profileType ProfileType @map("profile_type")

  // Provider 
  minOrderAmount  Int?      @map("min_order_amount")
  deliveryMethods String[]  @map("delivery_methods")
  categories      String[]
  products        Product[]

  // Horeca
  info      String?
  addresses Address[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("profiles")
}

model Address {
  id      Int    @id @default(autoincrement())
  address String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @map("profile_id")

  // Monday
  moFrom String? @map("mo_from")
  moTo   String? @map("mo_to")
  // Tuesday
  tuFrom String? @map("tu_from")
  tuTo   String? @map("tu_to")
  // Wednesday
  weFrom String? @map("we_from")
  weTo   String? @map("we_to")
  // Thursday
  thFrom String? @map("th_from")
  thTo   String? @map("th_to")
  // Friday
  frFrom String? @map("fr_from")
  frTo   String? @map("fr_to")
  // Saturday
  saFrom String? @map("sa_from")
  saTo   String? @map("sa_to")
  // Sunday
  suFrom String? @map("su_from")
  suTo   String? @map("su_to")

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @map("profile_id")

  category      String
  name          String
  description   String
  producer      String
  cost          Float
  count         Int
  packagingType ProductPackagingType @map("packaging_type")

  productImage ProductImage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("products")
}

model ProductImage {
  id Int @id @default(autoincrement())

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  image   Uploads? @relation(fields: [imageId], references: [id])
  imageId Int?     @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("products_images")
}

model Uploads {
  id       Int    @id @default(autoincrement())
  // originalname
  name     String
  mimetype String
  path     String
  size     Int

  productImage   ProductImage?
  horecaAppImage HorecaApplicationImage[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("uploads")
}

model CronTask {
  id Int @id @default(autoincrement())

  mail Mail?

  status    CronStatus @default(Ready)
  tries     Int        @default(0)
  start     DateTime?
  finish    DateTime?
  proof     String?
  pid       Int        @default(0)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("cron_tasks")
}

model Mail {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  to       String
  subject  String
  template String
  context  Json

  logs MailLog[]

  cron   CronTask @relation(fields: [cronId], references: [id])
  cronId Int      @unique @map("cron_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("mails")
}

model MailLog {
  id Int @id @default(autoincrement())

  mail   Mail @relation(fields: [mailId], references: [id])
  mailId Int  @map("mail_id")

  message String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("mail_logs")
}

model HorecaApplication {
  id     Int                      @id @default(autoincrement())
  items  HorecaApplicationItem[]
  images HorecaApplicationImage[]

  address      String
  deliveryTime DateTime    @map("delivery_time")
  acceptUntill DateTime    @map("accept_untill")
  paymentType  PaymentType @map("payment_type")

  comment String?

  name  String
  phone String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_applications")
}

model HorecaApplicationItem {
  id       Int               @id @default(autoincrement())
  appId    Int               @map("app_id")
  app      HorecaApplication @relation(fields: [appId], references: [id])
  name     String
  amount   Float
  unit     String
  category String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_application_items")
}

model HorecaApplicationImage {
  id Int @id @default(autoincrement())

  appId Int               @map("app_id")
  app   HorecaApplication @relation(fields: [appId], references: [id])

  image   Uploads? @relation(fields: [imageId], references: [id])
  imageId Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_application_images")
}

model HorecaApplicationTemplate {
  id Int @id @default(autoincrement())

  content Json
  name    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_applications_templates")
}
