// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ProfileType {
  Provider
  Horeca
}

enum UploadsLinkType {
  ProviderRequestItem
  HorecaRequest
  Product
}

enum UserRole {
  Admin
  Horeca
  Provider
}

enum ProductPackagingType {
  Bottle
  Box
  Pallet
}

enum CronStatus {
  Ready
  Work
  Done
  Error
  Failed
}

enum CronType {
  Mail
}

enum PaymentType {
  Prepayment
  Deferment
  PaymentUponDelivery
}

enum ChatType {
  Support
  Order // Aggrement between horeca and provider requests
  Private
}

model User {
  id Int @id @default(autoincrement())

  email          String  @unique
  password       String
  activationLink String  @default(uuid()) @map("activation_link")
  isActivated    Boolean @default(false)
  // Название компании
  name           String
  // ИНН
  tin            String

  role UserRole

  phone   String?
  profile Profile?
  mails   Mail[]

  Product          Product[]
  providerRequests ProviderRequest[]
  horecaRequests   HorecaRequest[]

  createdAt                     DateTime                      @default(now()) @map("created_at")
  updatedAt                     DateTime                      @default(now()) @updatedAt @map("updated_at")
  horecaRequestProviderStatuses HorecaRequestProviderStatus[]

  // horeca property
  favourites HorecaFavourites[] @relation("user")

  // provider property
  favouritesOf          HorecaFavourites[]      @relation("provider")
  templates HorecaRequestTemplate[]

  @@map("users")
}

model Profile {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique @map("user_id")

  profileType ProfileType @map("profile_type")

  // Provider 
  minOrderAmount  Int?     @map("min_order_amount")
  deliveryMethods String[] @map("delivery_methods")
  categories      String[]

  // Horeca
  info      String?
  addresses Address[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("profiles")
}

model Address {
  id      Int    @id @default(autoincrement())
  address String

  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @map("profile_id")

  // Monday
  moFrom String? @map("mo_from")
  moTo   String? @map("mo_to")
  // Tuesday
  tuFrom String? @map("tu_from")
  tuTo   String? @map("tu_to")
  // Wednesday
  weFrom String? @map("we_from")
  weTo   String? @map("we_to")
  // Thursday
  thFrom String? @map("th_from")
  thTo   String? @map("th_to")
  // Friday
  frFrom String? @map("fr_from")
  frTo   String? @map("fr_to")
  // Saturday
  saFrom String? @map("sa_from")
  saTo   String? @map("sa_to")
  // Sunday
  suFrom String? @map("su_from")
  suTo   String? @map("su_to")

  @@map("addresses")
}

model Product {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  category      String
  name          String
  description   String
  producer      String
  cost          Float
  count         Int
  packagingType ProductPackagingType @map("packaging_type")

  // images - could be loaded on runtime from UploadsLink

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("products")
}

model Upload {
  id       Int    @id @default(autoincrement())
  // originalname
  name     String
  mimetype String
  path     String
  size     Int

  // Horeca
  uploadsLink UploadsLink?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("uploads")
}

model UploadsLink {
  id Int @id @default(autoincrement())

  sourceType UploadsLinkType
  sourceId   Int             @map("proposal_id")

  image   Upload? @relation(fields: [imageId], references: [id])
  imageId Int     @unique

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("uploads_links")
}

model CronTask {
  id Int @id @default(autoincrement())

  mail Mail?

  status    CronStatus @default(Ready)
  tries     Int        @default(0)
  start     DateTime?
  finish    DateTime?
  proof     String?
  pid       Int        @default(0)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")

  @@map("cron_tasks")
}

model Mail {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  to       String
  subject  String
  template String
  context  Json

  logs MailLog[]

  cron   CronTask @relation(fields: [cronId], references: [id])
  cronId Int      @unique @map("cron_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("mails")
}

model MailLog {
  id Int @id @default(autoincrement())

  mail   Mail @relation(fields: [mailId], references: [id])
  mailId Int  @map("mail_id")

  message String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("mail_logs")
}

model HorecaFavourites {
  id Int @id @default(autoincrement())

  user   User @relation("user", fields: [userId], references: [id])
  userId Int  @map("user_id")

  provider   User @relation("provider", fields: [providerId], references: [id])
  providerId Int  @map("provider_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_favourites")
}

model HorecaRequest {
  id           Int                 @id @default(autoincrement())
  user         User                @relation(fields: [userId], references: [id])
  userId       Int                 @map("user_id")
  items        HorecaRequestItem[]
  address      String
  deliveryTime DateTime            @map("delivery_time")
  acceptUntill DateTime            @map("accept_untill")
  paymentType  PaymentType         @map("payment_type")
  comment      String?
  name         String
  phone        String

  // indicates whitch provider request was approved by horeca to start chating
  activeProviderRequest   ProviderRequest? @relation(fields: [activeProviderRequestId], references: [id])
  activeProviderRequestId Int?             @unique @map("active_provider_request_id")

  chat   Chat? @relation(fields: [chatId], references: [id])
  chatId Int?  @unique @map("chat_id")

  providerRequests            ProviderRequest[]            @relation("allProviderRequests")
  // shouldn't be used
  horecaRequestProviderStatus HorecaRequestProviderStatus?

  // images - could be loaded on runtime from UploadsLink
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_requests")
}

model HorecaRequestItem {
  id              Int           @id @default(autoincrement())
  horecaRequestId Int           @map("horeca_request_id")
  horecaRequest   HorecaRequest @relation(fields: [horecaRequestId], references: [id])
  name            String
  amount          Float
  unit            String
  category        String

  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at")
  providerRequestItem ProviderRequestItem[]

  @@map("horeca_request_items")
}

model HorecaRequestTemplate {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  content Json
  name    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_request_templates")
}

model HorecaRequestProviderStatus {
  horecaRequest   HorecaRequest @relation(fields: [horecaRequestId], references: [id])
  horecaRequestId Int           @unique @map("horeca_request_id")
  viewed          Boolean       @default(false)
  hidden          Boolean       @default(false)

  provider   User @relation(fields: [providerId], references: [id])
  providerId Int  @map("provider_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("horeca_request_provider_status")
}

// Provider Application
model ProviderRequest {
  id      Int                   @id @default(autoincrement())
  comment String?
  user    User                  @relation(fields: [userId], references: [id])
  userId  Int                   @map("user_id")
  items   ProviderRequestItem[]

  horecaRequest   HorecaRequest @relation("allProviderRequests", fields: [horecaRequestId], references: [id])
  horecaRequestId Int           @map("horeca_request_id")

  //just relation for  HorecaRequest.activeProviderRequest
  for HorecaRequest?

  // images - could be loaded on runtime from UploadsLink     
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([userId, horecaRequestId])
  @@map("provider_requests")
}

model ProviderRequestItem {
  id                Int             @id @default(autoincrement())
  providerRequestId Int             @map("provider_request_id")
  providerRequest   ProviderRequest @relation(fields: [providerRequestId], references: [id])

  horecaRequestItemId Int               @map("horeca_request_item_id")
  horecaRequestItem   HorecaRequestItem @relation(fields: [horecaRequestItemId], references: [id])

  available    Boolean @default(true)
  manufacturer String
  cost         Float

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("provider_requests_items")
}

model Chat {
  id Int @id @default(autoincrement())

  messages  ChatMessage[]
  opponents Int[]
  type      ChatType

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  horecaRequest HorecaRequest?

  @@map("chats")
}

model ChatMessage {
  id Int @id @default(autoincrement())

  chatId Int  @map("chat_id")
  chat   Chat @relation(fields: [chatId], references: [id])

  message String

  // as it can be server message
  authorId Int?    @map("author_id")
  // indicates that this is server message
  isServer Boolean @default(false) @map("is_server")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("chat_messages")
}
